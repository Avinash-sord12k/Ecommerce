/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** <Lambda> */
        get: operations["_lambda__api_v1_welcome_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create User */
        post: operations["create_user_api_v1_users_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login User */
        post: operations["login_user_api_v1_users_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout User */
        get: operations["logout_user_api_v1_users_logout_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Me */
        get: operations["get_user_me_api_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Address */
        post: operations["create_address_api_v1_address_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address/get-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Address */
        get: operations["get_all_address_api_v1_address_get_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Address */
        put: operations["update_address_api_v1_address_update__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Address */
        delete: operations["delete_address_api_v1_address__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/role/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Role
         * @description Create a new role with no initial permissions
         */
        post: operations["create_role_api_v1_role_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Roles
         * @description Get all roles with pagination and optional role ID filter
         */
        get: operations["get_all_roles_api_v1_role_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/role/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Role
         * @description Update a role's information and permissions
         */
        put: operations["update_role_api_v1_role_update__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/role/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Role
         * @description Delete a role and its permission associations
         */
        delete: operations["delete_role_api_v1_role__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/permission/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Permission */
        post: operations["create_permission_api_v1_permission_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Permissions */
        get: operations["get_all_permissions_api_v1_permission_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/permission/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Permission */
        delete: operations["delete_permission_api_v1_permission__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Category */
        post: operations["create_category_api_v1_category_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/get-by-id/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Category By Id */
        get: operations["get_category_by_id_api_v1_category_get_by_id__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/get-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Category */
        get: operations["get_category_api_v1_category_get_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Category */
        delete: operations["delete_category_api_v1_category__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subcategory/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Sub Category */
        post: operations["create_sub_category_api_v1_subcategory_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subcategory/get-by-id/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sub Category By Id */
        get: operations["get_sub_category_by_id_api_v1_subcategory_get_by_id__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subcategory/get-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sub Category */
        get: operations["get_sub_category_api_v1_subcategory_get_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subcategory/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Sub Category */
        delete: operations["delete_sub_category_api_v1_subcategory__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Product */
        post: operations["create_product_api_v1_product_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Products */
        get: operations["get_products_api_v1_product_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Product */
        put: operations["update_product_api_v1_product_update__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Product */
        delete: operations["delete_product_api_v1_product__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Cart */
        post: operations["create_cart_api_v1_cart_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Carts */
        get: operations["get_all_carts_api_v1_cart_get"];
        put?: never;
        post?: never;
        /** Delete Cart */
        delete: operations["delete_cart_api_v1_cart_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Cart */
        put: operations["update_cart_api_v1_cart_update__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/add-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Item To Cart */
        post: operations["add_item_to_cart_api_v1_cart_add_item_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/remove-item/{cart_id}/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Item From Cart */
        delete: operations["remove_item_from_cart_api_v1_cart_remove_item__cart_id___product_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddToCartRequestModel */
        AddToCartRequestModel: {
            /**
             * Cart Id
             * @description ID of the cart
             */
            cart_id: number;
            /**
             * Product Id
             * @description ID of the product
             */
            product_id: number;
            /**
             * Quantity
             * @description Quantity of the product
             */
            quantity: number;
        };
        /** AddressCreateModel */
        AddressCreateModel: {
            /**
             * Name
             * @description Name of the address
             */
            name: string;
            /**
             * Address
             * @description Address of the address
             */
            address: string;
            /**
             * City
             * @description City of the address
             */
            city: string;
            /**
             * State
             * @description State of the address
             */
            state: string;
            /**
             * Country
             * @description Country of the address
             */
            country: string;
            /**
             * Pincode
             * @description Pincode of the address
             */
            pincode: string;
        };
        /** AddressResponseModel */
        AddressResponseModel: {
            /**
             * Name
             * @description Name of the address
             */
            name: string;
            /**
             * Address
             * @description Address of the address
             */
            address: string;
            /**
             * City
             * @description City of the address
             */
            city: string;
            /**
             * State
             * @description State of the address
             */
            state: string;
            /**
             * Country
             * @description Country of the address
             */
            country: string;
            /**
             * Pincode
             * @description Pincode of the address
             */
            pincode: string;
            /**
             * Id
             * @description ID of the address
             */
            id: number;
            /**
             * User Id
             * @description ID of the user
             */
            user_id: number;
        };
        /** AllCategoriesResponseModel */
        AllCategoriesResponseModel: {
            /** Categories */
            categories: components["schemas"]["CategoryResponseModel"][];
        };
        /** AllPermissionsResponseModel */
        AllPermissionsResponseModel: {
            /** Items */
            items: components["schemas"]["PermissionResponseModel"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Pages */
            total_pages: number;
            /** Has Next */
            readonly has_next: boolean;
            /** Has Previous */
            readonly has_previous: boolean;
        };
        /** AllRolesResponseModel */
        AllRolesResponseModel: {
            /** Items */
            items: components["schemas"]["RoleResponseModel"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Pages */
            total_pages: number;
            /** Has Next */
            readonly has_next: boolean;
            /** Has Previous */
            readonly has_previous: boolean;
        };
        /** AllSubCategoriesResponseModel */
        AllSubCategoriesResponseModel: {
            /** Sub Categories */
            sub_categories: components["schemas"]["SubCategoryResponseModel"][];
        };
        /** Body_login_user_api_v1_users_login_post */
        Body_login_user_api_v1_users_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** CartItemsResponseModel */
        CartItemsResponseModel: {
            /**
             * Id
             * @description ID of the cart item
             */
            id: number;
            /**
             * Cart Id
             * @description ID of the cart
             */
            cart_id: number;
            /**
             * Product Id
             * @description ID of the product
             */
            product_id: number;
            /**
             * Quantity
             * @description Quantity of the product
             */
            quantity: number;
        };
        /** CartResponseModel */
        CartResponseModel: {
            /**
             * Id
             * @description ID of the cart
             */
            id: number;
        };
        /**
         * CartStatus
         * @enum {string}
         */
        CartStatus: "active" | "inactive" | "abandoned";
        /** CartsResponseModel */
        CartsResponseModel: {
            /**
             * Id
             * @description ID of the cart
             */
            id: number;
            /**
             * Name
             * @description Name of the cart
             */
            name: string;
            /**
             * Reminder Date
             * @description Reminder date of the cart
             */
            reminder_date?: string | null;
            /** @description Status of the cart */
            status: components["schemas"]["CartStatus"];
            /**
             * Items
             * @description Cart items
             */
            items?: components["schemas"]["CartItemsResponseModel"][];
        };
        /** CategoryCreateModel */
        CategoryCreateModel: {
            /**
             * Name
             * @description Name of the category
             */
            name: string;
        };
        /** CategoryResponseModel */
        CategoryResponseModel: {
            /**
             * Id
             * @description ID of the category
             */
            id: number;
            /**
             * Name
             * @description Name of the category
             */
            name: string;
        };
        /** CreateCartRequestModel */
        CreateCartRequestModel: {
            /**
             * Name
             * @description Name of the cart
             */
            name: string;
            /**
             * Reminder Date
             * @description Reminder date of the cart
             */
            reminder_date?: string | null;
        };
        /** CreateProductRequestModel */
        CreateProductRequestModel: {
            /**
             * Name
             * @description The name of the product
             */
            name: string;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Price
             * @description Price of the product in INR
             */
            price?: number | string;
            /**
             * Slug
             * @description Unique slug for the product
             */
            slug?: string;
            /**
             * Tags
             * @description Comma-separated product tags
             */
            tags?: string | null;
            /**
             * Discount
             * @description Discount percentage
             * @default 0.0
             */
            discount: number | string;
            /**
             * Tax
             * @description Tax percentage
             * @default 0.0
             */
            tax: number | string;
            /**
             * Stock
             * @description Available stock quantity
             */
            stock: number;
            /**
             * Category Id
             * @description ID of the category
             */
            category_id: number;
            /**
             * Sub Category Ids
             * @description List of sub-category IDs
             */
            sub_category_ids?: number[] | null;
            /**
             * Is Active
             * @description Indicates if the product is active
             * @default true
             */
            is_active: boolean;
            /**
             * Thumbnail
             * @description URL or path of the thumbnail image
             */
            thumbnail?: string | null;
            /**
             * Images
             * @description List of URLs or paths for the product images
             */
            images?: string[] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PaginatedResponse[AddressResponseModel] */
        PaginatedResponse_AddressResponseModel_: {
            /** Items */
            items: components["schemas"]["AddressResponseModel"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Pages */
            total_pages: number;
            /** Has Next */
            readonly has_next: boolean;
            /** Has Previous */
            readonly has_previous: boolean;
        };
        /** PaginatedResponse[CartsResponseModel] */
        PaginatedResponse_CartsResponseModel_: {
            /** Items */
            items: components["schemas"]["CartsResponseModel"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Pages */
            total_pages: number;
            /** Has Next */
            readonly has_next: boolean;
            /** Has Previous */
            readonly has_previous: boolean;
        };
        /** PaginatedResponse[ProductResponseModel] */
        PaginatedResponse_ProductResponseModel_: {
            /** Items */
            items: components["schemas"]["ProductResponseModel"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Pages */
            total_pages: number;
            /** Has Next */
            readonly has_next: boolean;
            /** Has Previous */
            readonly has_previous: boolean;
        };
        /** PermissionCreateModel */
        PermissionCreateModel: {
            /**
             * Name
             * @description Name of the permission
             */
            name: string;
            /**
             * Description
             * @description Description of the permission
             */
            description?: string;
        };
        /** PermissionResponseModel */
        PermissionResponseModel: {
            /**
             * Id
             * @description ID of the permission
             */
            id: number;
            /**
             * Name
             * @description Name of the permission
             */
            name: string;
            /**
             * Description
             * @description Description of the permission
             */
            description?: string;
        };
        /** ProductResponseModel */
        ProductResponseModel: {
            /**
             * Name
             * @description The name of the product
             */
            name: string;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Price
             * @description Price of the product in INR
             */
            price?: string;
            /**
             * Slug
             * @description Unique slug for the product
             */
            slug?: string;
            /**
             * Tags
             * @description Comma-separated product tags
             */
            tags?: string | null;
            /**
             * Discount
             * @description Discount percentage
             */
            discount?: string;
            /**
             * Tax
             * @description Tax percentage
             */
            tax?: string;
            /**
             * Stock
             * @description Available stock quantity
             */
            stock: number;
            /**
             * Category Id
             * @description ID of the category
             */
            category_id: number;
            /**
             * Sub Category Ids
             * @description List of sub-category IDs
             */
            sub_category_ids?: number[] | null;
            /**
             * Is Active
             * @description Indicates if the product is active
             * @default true
             */
            is_active: boolean;
            /**
             * Thumbnail
             * @description URL or path of the thumbnail image
             */
            thumbnail?: string | null;
            /**
             * Images
             * @description List of URLs or paths for the product images
             */
            images?: string[] | null;
            /**
             * Id
             * @description The unique identifier of the product
             */
            id: number;
            /** Computed Price */
            readonly computed_price: string;
        };
        /** RoleCreateModel */
        RoleCreateModel: {
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * Description
             * @description Description of the role
             */
            description?: string;
        };
        /** RoleResponseModel */
        RoleResponseModel: {
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * Description
             * @description Description of the role
             */
            description?: string;
            /**
             * Id
             * @description ID of the role
             */
            id: number;
            /**
             * Permissions
             * @description List of permission names
             */
            permissions?: string[] | null;
        };
        /** RoleUpdateModel */
        RoleUpdateModel: {
            /**
             * Name
             * @description Name of the role
             */
            name?: string | null;
            /**
             * Description
             * @description Description of the role
             */
            description?: string | null;
            /**
             * Permissions
             * @description List of permission names
             */
            permissions?: string[] | null;
        };
        /** SubCategoryCreateModel */
        SubCategoryCreateModel: {
            /**
             * Name
             * @description Name of the sub-category
             */
            name: string;
            /**
             * Category Id
             * @description ID of the parent category
             */
            category_id: number;
        };
        /** SubCategoryResponseModel */
        SubCategoryResponseModel: {
            /**
             * Id
             * @description ID of the sub-category
             */
            id: number;
            /**
             * Name
             * @description Name of the sub-category
             */
            name: string;
            /**
             * Category Id
             * @description ID of the parent category
             */
            category_id: number;
        };
        /** UpdateProductRequestModel */
        UpdateProductRequestModel: {
            /**
             * Name
             * @description The name of the product
             */
            name: string;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Price
             * @description Price of the product in INR
             */
            price?: number | string;
            /**
             * Slug
             * @description Unique slug for the product
             */
            slug?: string;
            /**
             * Tags
             * @description Comma-separated product tags
             */
            tags?: string | null;
            /**
             * Discount
             * @description Discount percentage
             * @default 0.0
             */
            discount: number | string;
            /**
             * Tax
             * @description Tax percentage
             * @default 0.0
             */
            tax: number | string;
            /**
             * Stock
             * @description Available stock quantity
             */
            stock: number;
            /**
             * Category Id
             * @description ID of the category
             */
            category_id: number;
            /**
             * Sub Category Ids
             * @description List of sub-category IDs
             */
            sub_category_ids?: number[] | null;
            /**
             * Is Active
             * @description Indicates if the product is active
             * @default true
             */
            is_active: boolean;
            /**
             * Thumbnail
             * @description URL or path of the thumbnail image
             */
            thumbnail?: string | null;
            /**
             * Images
             * @description List of URLs or paths for the product images
             */
            images?: string[] | null;
        };
        /** UserCreate */
        UserCreate: {
            /** Username */
            username: string;
            /** Password */
            password: string;
            /** Email */
            email?: string | null;
            /** Full Name */
            full_name?: string | null;
            /** Phone */
            phone?: string | null;
            /** @default customer */
            role: components["schemas"]["UserRoles"];
        };
        /** UserLoginLogoutResponse */
        UserLoginLogoutResponse: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** UserRead */
        UserRead: {
            /** Id */
            id: number;
            /** Username */
            username: string;
            /** Email */
            email?: string | null;
            /** Full Name */
            full_name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Role Id */
            role_id: number;
            /** Is Internal User */
            is_internal_user: boolean;
            /**
             * Date Joined
             * Format: date-time
             */
            date_joined: string;
            /**
             * Last Active
             * Format: date-time
             */
            last_active: string;
        };
        /**
         * UserRoles
         * @enum {string}
         */
        UserRoles: "admin" | "customer" | "seller" | "tester";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    _lambda__api_v1_welcome_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    create_user_api_v1_users_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_user_api_v1_users_login_post: {
        parameters: {
            query?: {
                set_cookie?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_user_api_v1_users_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginLogoutResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_user_api_v1_users_logout_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginLogoutResponse"];
                };
            };
        };
    };
    get_user_me_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
        };
    };
    create_address_api_v1_address_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_address_api_v1_address_get_all_get: {
        parameters: {
            query?: {
                address_id?: number | null;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_AddressResponseModel_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_address_api_v1_address_update__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_address_api_v1_address__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_role_api_v1_role_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_roles_api_v1_role_get: {
        parameters: {
            query?: {
                role_id?: number;
                include_permissions?: boolean;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllRolesResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_role_api_v1_role_update__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_role_api_v1_role__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_permission_api_v1_permission_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_permissions_api_v1_permission_get: {
        parameters: {
            query?: {
                permission_id?: number | null;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllPermissionsResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_permission_api_v1_permission__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_category_api_v1_category_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_by_id_api_v1_category_get_by_id__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_api_v1_category_get_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllCategoriesResponseModel"];
                };
            };
        };
    };
    delete_category_api_v1_category__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_sub_category_api_v1_subcategory_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubCategoryCreateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sub_category_by_id_api_v1_subcategory_get_by_id__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sub_category_api_v1_subcategory_get_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllSubCategoriesResponseModel"];
                };
            };
        };
    };
    delete_sub_category_api_v1_subcategory__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategoryResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_product_api_v1_product_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_products_api_v1_product_get: {
        parameters: {
            query?: {
                id?: number | null;
                name?: string | null;
                slug?: string | null;
                min_price?: number | string | null;
                max_price?: number | string | null;
                min_discount?: number | string | null;
                max_discount?: number | string | null;
                min_tax?: number | string | null;
                max_tax?: number | string | null;
                min_stock?: number | null;
                max_stock?: number | null;
                category_id?: number | null;
                sub_category_id?: number | null;
                tags?: string | null;
                is_active?: boolean | null;
                has_thumbnail?: boolean | null;
                has_images?: boolean | null;
                sort_by?: ("id" | "name" | "slug" | "price" | "discount" | "tax" | "stock" | "created_at") | null;
                sort_order?: ("asc" | "desc") | null;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_ProductResponseModel_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_product_api_v1_product_update__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_product_api_v1_product__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_cart_api_v1_cart_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCartRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_carts_api_v1_cart_get: {
        parameters: {
            query?: {
                cart_id?: number;
                get_items?: boolean;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_CartsResponseModel_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_cart_api_v1_cart_delete: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_cart_api_v1_cart_update__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCartRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_item_to_cart_api_v1_cart_add_item_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddToCartRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_item_from_cart_api_v1_cart_remove_item__cart_id___product_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cart_id: number;
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
